// Code generated by MockGen. DO NOT EDIT.
// Source: ./dependencytrack/dependencytrack.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	client_go "github.com/DependencyTrack/client-go"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDependencyTrackClient is a mock of DependencyTrackClient interface.
type MockDependencyTrackClient struct {
	ctrl     *gomock.Controller
	recorder *MockDependencyTrackClientMockRecorder
}

// MockDependencyTrackClientMockRecorder is the mock recorder for MockDependencyTrackClient.
type MockDependencyTrackClientMockRecorder struct {
	mock *MockDependencyTrackClient
}

// NewMockDependencyTrackClient creates a new mock instance.
func NewMockDependencyTrackClient(ctrl *gomock.Controller) *MockDependencyTrackClient {
	mock := &MockDependencyTrackClient{ctrl: ctrl}
	mock.recorder = &MockDependencyTrackClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependencyTrackClient) EXPECT() *MockDependencyTrackClientMockRecorder {
	return m.recorder
}

// AddProject mocks base method.
func (m *MockDependencyTrackClient) AddProject(ctx context.Context, policyUUID, projectUUID uuid.UUID) (client_go.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProject", ctx, policyUUID, projectUUID)
	ret0, _ := ret[0].(client_go.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProject indicates an expected call of AddProject.
func (mr *MockDependencyTrackClientMockRecorder) AddProject(ctx, policyUUID, projectUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProject", reflect.TypeOf((*MockDependencyTrackClient)(nil).AddProject), ctx, policyUUID, projectUUID)
}

// AddTag mocks base method.
func (m *MockDependencyTrackClient) AddTag(ctx context.Context, policyUUID uuid.UUID, tagName string) (client_go.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTag", ctx, policyUUID, tagName)
	ret0, _ := ret[0].(client_go.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTag indicates an expected call of AddTag.
func (mr *MockDependencyTrackClientMockRecorder) AddTag(ctx, policyUUID, tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTag", reflect.TypeOf((*MockDependencyTrackClient)(nil).AddTag), ctx, policyUUID, tagName)
}

// CreatePolicy mocks base method.
func (m *MockDependencyTrackClient) CreatePolicy(ctx context.Context, policy client_go.Policy) (client_go.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", ctx, policy)
	ret0, _ := ret[0].(client_go.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockDependencyTrackClientMockRecorder) CreatePolicy(ctx, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockDependencyTrackClient)(nil).CreatePolicy), ctx, policy)
}

// CreatePolicyCondition mocks base method.
func (m *MockDependencyTrackClient) CreatePolicyCondition(ctx context.Context, policyUUID uuid.UUID, policyCondition client_go.PolicyCondition) (client_go.PolicyCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyCondition", ctx, policyUUID, policyCondition)
	ret0, _ := ret[0].(client_go.PolicyCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyCondition indicates an expected call of CreatePolicyCondition.
func (mr *MockDependencyTrackClientMockRecorder) CreatePolicyCondition(ctx, policyUUID, policyCondition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyCondition", reflect.TypeOf((*MockDependencyTrackClient)(nil).CreatePolicyCondition), ctx, policyUUID, policyCondition)
}

// DeletePolicyCondition mocks base method.
func (m *MockDependencyTrackClient) DeletePolicyCondition(ctx context.Context, policyConditionUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyCondition", ctx, policyConditionUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePolicyCondition indicates an expected call of DeletePolicyCondition.
func (mr *MockDependencyTrackClientMockRecorder) DeletePolicyCondition(ctx, policyConditionUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyCondition", reflect.TypeOf((*MockDependencyTrackClient)(nil).DeletePolicyCondition), ctx, policyConditionUUID)
}

// DeleteProject mocks base method.
func (m *MockDependencyTrackClient) DeleteProject(ctx context.Context, policyUUID, projectUUID uuid.UUID) (client_go.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, policyUUID, projectUUID)
	ret0, _ := ret[0].(client_go.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockDependencyTrackClientMockRecorder) DeleteProject(ctx, policyUUID, projectUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockDependencyTrackClient)(nil).DeleteProject), ctx, policyUUID, projectUUID)
}

// DeleteTag mocks base method.
func (m *MockDependencyTrackClient) DeleteTag(ctx context.Context, policyUUID uuid.UUID, tagName string) (client_go.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, policyUUID, tagName)
	ret0, _ := ret[0].(client_go.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockDependencyTrackClientMockRecorder) DeleteTag(ctx, policyUUID, tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockDependencyTrackClient)(nil).DeleteTag), ctx, policyUUID, tagName)
}

// GetPolicyForName mocks base method.
func (m *MockDependencyTrackClient) GetPolicyForName(ctx context.Context, policyName string) (client_go.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyForName", ctx, policyName)
	ret0, _ := ret[0].(client_go.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyForName indicates an expected call of GetPolicyForName.
func (mr *MockDependencyTrackClientMockRecorder) GetPolicyForName(ctx, policyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyForName", reflect.TypeOf((*MockDependencyTrackClient)(nil).GetPolicyForName), ctx, policyName)
}

// GetProjectForNameVersion mocks base method.
func (m *MockDependencyTrackClient) GetProjectForNameVersion(ctx context.Context, projectName, projectVersion string, excludeInactive, onlyRoot bool) (client_go.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectForNameVersion", ctx, projectName, projectVersion, excludeInactive, onlyRoot)
	ret0, _ := ret[0].(client_go.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectForNameVersion indicates an expected call of GetProjectForNameVersion.
func (mr *MockDependencyTrackClientMockRecorder) GetProjectForNameVersion(ctx, projectName, projectVersion, excludeInactive, onlyRoot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectForNameVersion", reflect.TypeOf((*MockDependencyTrackClient)(nil).GetProjectForNameVersion), ctx, projectName, projectVersion, excludeInactive, onlyRoot)
}

// GetProjectsForName mocks base method.
func (m *MockDependencyTrackClient) GetProjectsForName(ctx context.Context, projectName string, excludeInactive, onlyRoot bool) ([]client_go.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsForName", ctx, projectName, excludeInactive, onlyRoot)
	ret0, _ := ret[0].([]client_go.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsForName indicates an expected call of GetProjectsForName.
func (mr *MockDependencyTrackClientMockRecorder) GetProjectsForName(ctx, projectName, excludeInactive, onlyRoot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsForName", reflect.TypeOf((*MockDependencyTrackClient)(nil).GetProjectsForName), ctx, projectName, excludeInactive, onlyRoot)
}

// NeedsUpdatePolicy mocks base method.
func (m *MockDependencyTrackClient) NeedsUpdatePolicy(current, desierd client_go.Policy) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedsUpdatePolicy", current, desierd)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NeedsUpdatePolicy indicates an expected call of NeedsUpdatePolicy.
func (mr *MockDependencyTrackClientMockRecorder) NeedsUpdatePolicy(current, desierd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedsUpdatePolicy", reflect.TypeOf((*MockDependencyTrackClient)(nil).NeedsUpdatePolicy), current, desierd)
}

// UpdatePolicy mocks base method.
func (m *MockDependencyTrackClient) UpdatePolicy(ctx context.Context, policy client_go.Policy) (client_go.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", ctx, policy)
	ret0, _ := ret[0].(client_go.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockDependencyTrackClientMockRecorder) UpdatePolicy(ctx, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockDependencyTrackClient)(nil).UpdatePolicy), ctx, policy)
}
