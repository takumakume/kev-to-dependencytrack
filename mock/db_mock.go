// Code generated by MockGen. DO NOT EDIT.
// Source: ./kev/db.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockdbFetcher is a mock of dbFetcher interface.
type MockdbFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockdbFetcherMockRecorder
}

// MockdbFetcherMockRecorder is the mock recorder for MockdbFetcher.
type MockdbFetcherMockRecorder struct {
	mock *MockdbFetcher
}

// NewMockdbFetcher creates a new mock instance.
func NewMockdbFetcher(ctrl *gomock.Controller) *MockdbFetcher {
	mock := &MockdbFetcher{ctrl: ctrl}
	mock.recorder = &MockdbFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbFetcher) EXPECT() *MockdbFetcherMockRecorder {
	return m.recorder
}

// download mocks base method.
func (m *MockdbFetcher) download() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "download")
	ret0, _ := ret[0].(error)
	return ret0
}

// download indicates an expected call of download.
func (mr *MockdbFetcherMockRecorder) download() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "download", reflect.TypeOf((*MockdbFetcher)(nil).download))
}

// needsUpdate mocks base method.
func (m *MockdbFetcher) needsUpdate() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "needsUpdate")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// needsUpdate indicates an expected call of needsUpdate.
func (mr *MockdbFetcherMockRecorder) needsUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "needsUpdate", reflect.TypeOf((*MockdbFetcher)(nil).needsUpdate))
}

// read mocks base method.
func (m *MockdbFetcher) read() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "read")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// read indicates an expected call of read.
func (mr *MockdbFetcherMockRecorder) read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "read", reflect.TypeOf((*MockdbFetcher)(nil).read))
}
